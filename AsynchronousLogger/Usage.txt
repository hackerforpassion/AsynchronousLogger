# include "stdafx.h"
#include "Asynclogworker.h"
#include "Asynclog.h"
#include <iomanip>
#include <thread>

namespace
{
#if (defined(WIN32) || defined(_WIN32) || defined(__WIN32__))
const tstring path_to_log_file = _T("./");
#else
const tstring path_to_log_file = "/tmp/";
#endif
}

namespace example_fatal
{
	void killWithContractFailureIfNonEqual(int first, int second)
	{
	  CHECK(first == second) << _T("Test to see if contract works: onetwothree: " << 123 << ". This should be at the end of the log, and will exit this example");
	}


	void definiteKillWithDivideByZero(int one, int two) {
	  LOG(WARNING) << _T("The operations below will generate SIGFPE");
	  int zero = (two - 2*one);
	  int divide = (one / zero);
	  LOG(WARNING) << _T("this message should really not be shown. SIGFPE should be triggered by division by zero, div: ") << divide;
	}


	// on Ubunti this caused get a compiler warning with gcc4.6
	// from gcc 4.7.2 (at least) it causes a crash (as expected)
	// On windows it'll probably crash too.
	void tryToKillWithIllegalPrintout()
	{
	  std::cout << "\n\n***** Be ready this last example may 'abort' if on Windows/Linux_gcc4.7 " << std::endl << std::flush;
	  std::cout << "************************************************************\n\n" << std::endl << std::flush;
	  std::this_thread::sleep_for(std::chrono::seconds(1));
	  const tstring logging = _T("logging");
	  LOGF(DBUG, _T("ILLEGAL PRINTF_SYNTAX EXAMPLE. WILL GENERATE compiler warning.\nbadly formatted message:[Printf-type %d %s %d is %s the number 1 for many %s]"), 1, logging.c_str());
	}
} // example fatal

CWinApp theApp;

using namespace std;

int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
{
	int nRetCode = 0;

	HMODULE hModule = ::GetModuleHandle(NULL);

	if (hModule != NULL)
	{
		// initialize MFC and print and error on failure
		if (!AfxWinInit(hModule, NULL, ::GetCommandLine(), 0))
		{
			// TODO: change error code to suit your needs
			_tprintf(_T("Fatal Error: MFC initialization failed\n"));
			nRetCode = 1;
		}
		else
		{
			// TODO: code your application's behavior here.
		}
	}
	else
	{
		// TODO: change error code to suit your needs
		_tprintf(_T("Fatal Error: GetModuleHandle failed\n"));
		nRetCode = 1;
	}


	double pi_d = 3.1415926535897932384626433832795;
	float pi_f = 3.1415926535897932384626433832795f;

	AsyncLogWorker *logger = new AsyncLogWorker(_T("LogFile"), path_to_log_file, DBUG, _T("test")/*product name*/, _T("test") /*product version*/);
		AsyncLogger::initializeLogging(logger);
	AsyncLogger::initializeLogging(&logger);

	std::future<tstring> log_file_name_ = logger.logFileName();
	std::cout << "*** This is an example of Asynclog " << std::endl;
	std::cout << "*** It WILL exit by a FATAL trigger in the end" << std::endl;
	std::cout << "*** Please see the generated log and compare to " << std::endl;
	std::cout << "***    the code at Asynclog/test_example/main.cpp" << std::endl;
	std::wcout << _T("\n*** Log file: [") << log_file_name_.get() << _T("]\n\n") << std::endl;


	LogCritical(_T("LogDebug testing %d"), 123);

	LOGF(INFO, _T("Hi log %d"), 123);
	LogInfo(_T("Hi log %d"), 123);
	LOG(INFO) << "Test SLOG INFO";
	LOG(DBUG) << _T("Test SLOG DBUG");
	LOG(INFO) << _T("one: ") << 1;
	LOG(INFO) << _T("two: ") << 2;
	LOG(INFO) << _T("one and two: ") << 1 << _T(" and ") << 2;
	LOG(DBUG) << _T("float 2.14: ") << 1000/2.14f;
	LOG(DBUG) << _T("pi double: ") << pi_d;
	LOG(DBUG) << _T("pi float: ") << pi_f;
	LOG(DBUG) << _T("pi float (width 10): ") << std::setprecision(10) << pi_f;
	LOGF(INFO, _T("pi float printf:%f"), pi_f);
	LOG(CRITICAL) << _T("Log critical testing");
	//
	// START: LOG Entries that were in the article
	//
	//LOG(UNKNOWN_LEVEL) << "This log attempt will cause a compiler error";
	LOG(INFO) << _T("Simple to use with streaming syntax, easy as abc or ") << 123;
	LOGF(WARNING, _T("Printf-style syntax is also %s", "available"));
	LOG_IF(INFO, (1 < 2)) << _T("If true this text will be logged");
	LOGF_IF(INFO, (1<2), _T("if %d<%d : then this text will be logged"), 1,2);
	LOG_IF(FATAL, (2>3)) << _T("This message should NOT throw");
	LOGF(DBUG, _T("This API is popular with some %s", "programmers"));
	LOGF_IF(DBUG, (1<2), _T("If true, then this %s will be logged"), _T("message"));
	// OK --- on Ubunti this caused get a compiler warning with gcc4.6
	// from gcc 4.7.2 (at least) it causes a crash (as expected)
	// On windows itll probably crash
	// ---- IF you want to try 'FATAL' contract failure please comment away
	// ----- the 'illegalPrinout' call below
	example_fatal::tryToKillWithIllegalPrintout();

	int one= 1, two=2;
	example_fatal::definiteKillWithDivideByZero(one, two);

	CHECK(1<2) << _T("SHOULD NOT SEE THIS MESSAGE"); // non-failure contract

	std::cout << "\n\n***** Be ready this last example WILL trigger 'abort' (if not done earlier)" << std::endl;
	// exit by contract failure. See the dumped log, the function
	// that caused the fatal exit should be shown in the stackdump
	int smaller = 1;
	int larger = 2;
	example_fatal::killWithContractFailureIfNonEqual(smaller, larger);

	return nRetCode;
}
